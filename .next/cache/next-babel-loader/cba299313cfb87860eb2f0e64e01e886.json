{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, Fragment } from 'react';\nimport axios from 'axios';\nimport Pusher from 'pusher-js';\nimport Comment from '../Comment/Comment';\nconst SAD_EMOJI = [55357, 56864];\nconst HAPPY_EMOJI = [55357, 56832];\nconst NEUTRAL_EMOJI = [55357, 56848];\n\nclass CommentsWidget extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      comments: [],\n      person: null\n    });\n\n    _defineProperty(this, \"handleKeyUp\", evt => {\n      const value = evt.target.value;\n\n      if (evt.keyCode === 13 && !evt.shiftKey) {\n        const {\n          person\n        } = this.state;\n        const comment = {\n          person,\n          comment: value,\n          timestamp: +new Date()\n        };\n        evt.target.value = '';\n        this.setState({\n          person: null\n        }, () => axios.post('/comment', comment));\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.pusher = new Pusher(process.env.PUSHER_APP_KEY, {\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true\n    });\n    this.channel = this.pusher.subscribe('post-comments');\n    this.channel.bind('new-comment', ({\n      comment = null\n    }) => {\n      const {\n        comments\n      } = this.state;\n      comment && comments.push(comment);\n      this.setState({\n        comments\n      });\n    });\n    this.pusher.connection.bind('connected', () => {\n      axios.post('/comments').then(response => {\n        const comments = response.data.comments;\n        this.setState({\n          comments\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.pusher.disconnect();\n  }\n\n  render() {\n    const people = ['Stephanie', 'John', 'Steve', 'Anna', 'Margaret', 'Felix', 'Chris', 'Jamie', 'Rose', 'Bob', 'Vanessa', '9lad', 'Bridget', 'Sebastian', 'Richard'];\n    const nameBadgeStyles = {\n      fontSize: '0.8rem',\n      height: 40,\n      borderRadius: 20,\n      cursor: 'pointer'\n    };\n\n    const choosePersona = person => evt => this.setState({\n      person\n    });\n\n    const randomPeople = count => {\n      const selected = [];\n      let i = 0;\n      count = Math.max(0, Math.min(count, people.length));\n\n      while (i < count) {\n        const index = Math.floor(Math.random() * people.length);\n        if (selected.includes(index)) continue;\n        ++i && selected.push(index);\n      }\n\n      return selected.map(index => {\n        const person = people[index];\n        const className = 'd-block d-flex align-items-center text-center text-white bg-secondary font-weight-bold py-2 px-4 mr-3';\n        return __jsx(\"span\", {\n          key: index,\n          className: className,\n          style: nameBadgeStyles,\n          title: person,\n          onClick: choosePersona(person)\n        }, person);\n      });\n    };\n\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"border-bottom border-gray w-100 px-2 d-flex align-items-center bg-white justify-content-between\",\n      style: {\n        height: 90\n      }\n    }, __jsx(\"h2\", {\n      className: \"text-dark mb-0 mx-4\"\n    }, \"Comments\"), __jsx(\"span\", {\n      className: \"badge badge-pill badge-primary mx-4\",\n      style: {\n        fontSize: '1.2rem'\n      }\n    }, this.state.comments.length)), __jsx(\"div\", {\n      className: \"px-4 pb-4 w-100 d-flex flex-row flex-wrap align-items-start align-content-start position-relative\",\n      style: {\n        height: 'calc(100% - 250px)',\n        overflowY: 'scroll'\n      }\n    }, this.state.comments.map((comment, index) => {\n      const mood = comment.sentiment > 0 ? HAPPY_EMOJI : comment.sentiment === 0 ? NEUTRAL_EMOJI : SAD_EMOJI;\n      return __jsx(Fragment, {\n        key: index\n      }, __jsx(\"div\", {\n        className: `d-flex justify-content-start align-items-center w-100 font-weight-bold text-dark mt-4 pb-1 px-1`,\n        style: {\n          fontSize: '0.9rem'\n        }\n      }, __jsx(\"span\", {\n        className: \"d-inline-block pr-1\",\n        style: {\n          fontSize: '1.25rem'\n        }\n      }, String.fromCodePoint(...mood)), __jsx(\"span\", {\n        className: \"align-middle\",\n        style: {\n          lineHeight: '1.25rem'\n        }\n      }, comment.person || 'Anonymous')), __jsx(Comment, {\n        text: comment.comment\n      }));\n    })), __jsx(\"div\", {\n      className: \"border-top border-gray w-100 px-4 d-flex flex-wrap align-items-center align-content-center bg-light\",\n      style: {\n        height: 160\n      }\n    }, !this.state.person && __jsx(\"span\", {\n      className: \"text-dark py-2\",\n      style: {\n        fontSize: '1.5rem',\n        fontWeight: 500\n      }\n    }, \"Choose your Persona\"), __jsx(\"div\", {\n      className: \"w-100 py-2 pb-3 d-flex justify-content-start\"\n    }, this.state.person ? __jsx(\"span\", {\n      className: \"d-block d-flex align-items-center text-center text-white bg-primary font-weight-bold py-2 px-4 mr-3\",\n      style: nameBadgeStyles,\n      title: this.state.person\n    }, this.state.person) : randomPeople(4)), this.state.person && __jsx(\"textarea\", {\n      className: \"form-control px-3 py-2\",\n      onKeyUp: this.handleKeyUp,\n      placeholder: \"Make a comment\",\n      style: {\n        resize: 'none'\n      }\n    })));\n  }\n\n}\n\nexport default CommentsWidget;","map":null,"metadata":{},"sourceType":"module"}