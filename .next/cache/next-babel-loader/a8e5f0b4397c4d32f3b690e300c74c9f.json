{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, Fragment } from 'react';\nimport axios from 'axios';\nimport Pusher from 'pusher-js';\nimport Comment from '../Comment/Comment';\nvar SAD_EMOJI = [55357, 56864];\nvar HAPPY_EMOJI = [55357, 56832];\nvar NEUTRAL_EMOJI = [55357, 56848];\n\nvar CommentsWidget = /*#__PURE__*/function (_Component) {\n  _inherits(CommentsWidget, _Component);\n\n  var _super = _createSuper(CommentsWidget);\n\n  function CommentsWidget() {\n    var _this;\n\n    _classCallCheck(this, CommentsWidget);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      comments: [],\n      person: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyUp\", function (evt) {\n      var value = evt.target.value;\n\n      if (evt.keyCode === 13 && !evt.shiftKey) {\n        var person = _this.state.person;\n        var comment = {\n          person: person,\n          comment: value,\n          timestamp: +new Date()\n        };\n        evt.target.value = '';\n\n        _this.setState({\n          person: null\n        }, function () {\n          return axios.post('/comment', comment);\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(CommentsWidget, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.pusher = new Pusher(process.env.PUSHER_APP_KEY, {\n        cluster: process.env.PUSHER_APP_CLUSTER,\n        encrypted: true\n      });\n      this.channel = this.pusher.subscribe('post-comments');\n      this.channel.bind('new-comment', function (_ref) {\n        var _ref$comment = _ref.comment,\n            comment = _ref$comment === void 0 ? null : _ref$comment;\n        var comments = _this2.state.comments;\n        comment && comments.push(comment);\n\n        _this2.setState({\n          comments: comments\n        });\n      });\n      this.pusher.connection.bind('connected', function () {\n        axios.post('/comments').then(function (response) {\n          var comments = response.data.comments;\n\n          _this2.setState({\n            comments: comments\n          });\n        })[\"catch\"](function (error) {\n          console.log(error);\n        });\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.pusher.disconnect();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var people = ['Stephanie', 'John', 'Steve', 'Anna', 'Margaret', 'Felix', 'Chris', 'Jamie', 'Rose', 'Bob', 'Vanessa', '9lad', 'Bridget', 'Sebastian', 'Richard'];\n      var nameBadgeStyles = {\n        fontSize: '0.8rem',\n        height: 40,\n        borderRadius: 20,\n        cursor: 'pointer'\n      };\n\n      var choosePersona = function choosePersona(person) {\n        return function (evt) {\n          return _this3.setState({\n            person: person\n          });\n        };\n      };\n\n      var randomPeople = function randomPeople(count) {\n        var selected = [];\n        var i = 0;\n        count = Math.max(0, Math.min(count, people.length));\n\n        while (i < count) {\n          var index = Math.floor(Math.random() * people.length);\n          if (selected.includes(index)) continue;\n          ++i && selected.push(index);\n        }\n\n        return selected.map(function (index) {\n          var person = people[index];\n          var className = 'd-block d-flex align-items-center text-center text-white bg-secondary font-weight-bold py-2 px-4 mr-3';\n          return __jsx(\"span\", {\n            key: index,\n            className: className,\n            style: nameBadgeStyles,\n            title: person,\n            onClick: choosePersona(person)\n          }, person);\n        });\n      };\n\n      return __jsx(React.Fragment, null, __jsx(\"div\", {\n        className: \"border-bottom border-gray w-100 px-2 d-flex align-items-center bg-white justify-content-between\",\n        style: {\n          height: 90\n        }\n      }, __jsx(\"h2\", {\n        className: \"text-dark mb-0 mx-4\"\n      }, \"Comments\"), __jsx(\"span\", {\n        className: \"badge badge-pill badge-primary mx-4\",\n        style: {\n          fontSize: '1.2rem'\n        }\n      }, this.state.comments.length)), __jsx(\"div\", {\n        className: \"px-4 pb-4 w-100 d-flex flex-row flex-wrap align-items-start align-content-start position-relative\",\n        style: {\n          height: 'calc(100% - 250px)',\n          overflowY: 'scroll'\n        }\n      }, this.state.comments.map(function (comment, index) {\n        var mood = comment.sentiment > 0 ? HAPPY_EMOJI : comment.sentiment === 0 ? NEUTRAL_EMOJI : SAD_EMOJI;\n        return __jsx(Fragment, {\n          key: index\n        }, __jsx(\"div\", {\n          className: \"d-flex justify-content-start align-items-center w-100 font-weight-bold text-dark mt-4 pb-1 px-1\",\n          style: {\n            fontSize: '0.9rem'\n          }\n        }, __jsx(\"span\", {\n          className: \"d-inline-block pr-1\",\n          style: {\n            fontSize: '1.25rem'\n          }\n        }, String.fromCodePoint.apply(String, _toConsumableArray(mood))), __jsx(\"span\", {\n          className: \"align-middle\",\n          style: {\n            lineHeight: '1.25rem'\n          }\n        }, comment.person || 'Anonymous')), __jsx(Comment, {\n          text: comment.comment\n        }));\n      })), __jsx(\"div\", {\n        className: \"border-top border-gray w-100 px-4 d-flex flex-wrap align-items-center align-content-center bg-light\",\n        style: {\n          height: 160\n        }\n      }, !this.state.person && __jsx(\"span\", {\n        className: \"text-dark py-2\",\n        style: {\n          fontSize: '1.5rem',\n          fontWeight: 500\n        }\n      }, \"Choose your Persona\"), __jsx(\"div\", {\n        className: \"w-100 py-2 pb-3 d-flex justify-content-start\"\n      }, this.state.person ? __jsx(\"span\", {\n        className: \"d-block d-flex align-items-center text-center text-white bg-primary font-weight-bold py-2 px-4 mr-3\",\n        style: nameBadgeStyles,\n        title: this.state.person\n      }, this.state.person) : randomPeople(4)), this.state.person && __jsx(\"textarea\", {\n        className: \"form-control px-3 py-2\",\n        onKeyUp: this.handleKeyUp,\n        placeholder: \"Make a comment\",\n        style: {\n          resize: 'none'\n        }\n      })));\n    }\n  }]);\n\n  return CommentsWidget;\n}(Component);\n\nexport default CommentsWidget;","map":null,"metadata":{},"sourceType":"module"}