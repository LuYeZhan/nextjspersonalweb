{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Pusher from 'pusher-js';\n\nconst CommentsWidget = props => {\n  const {\n    0: comment,\n    1: setComment\n  } = useState([]);\n  const {\n    0: person,\n    1: setPerson\n  } = useState(null);\n  useEffect(() => {\n    this.pusher = new Pusher(process.env.PUSHER_APP_KEY, {\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true\n    });\n    this.channel = this.pusher.subscribe('post-comments');\n    this.channel.bind('new-comment', ({\n      comment = null\n    }) => {\n      const {\n        comments\n      } = comment && comments.push(comment);\n      setComment(comments);\n    });\n    this.pusher.connection.bind('connected', () => {\n      axios.post('/comments').then(response => {\n        const comments = response.data.comments;\n        setComment(comments);\n      });\n    });\n    return () => this.pusher.disconnect();\n  }, []);\n\n  handleKeyUp = evt => {\n    const value = evt.target.value;\n\n    if (evt.keyCode === 13 && !evt.shiftKey) {\n      const {\n        person\n      } = this.state;\n      const comment = {\n        person,\n        comment: value,\n        timestamp: +new Date()\n      };\n      evt.target.value = '';\n      setPerson(null, () => axios.post('/comment', comment));\n    }\n  };\n\n  const people = ['Stephanie', 'John', 'Steve', 'Anna', 'Margaret', 'Felix', 'Chris', 'Jamie', 'Rose', 'Bob', 'Vanessa', '9lad', 'Bridget', 'Sebastian', 'Richard'];\n  const nameBadgeStyles = {\n    fontSize: '0.8rem',\n    height: 40,\n    borderRadius: 20,\n    cursor: 'pointer'\n  };\n\n  const choosePersona = person => evt => setPerson(person);\n\n  const randomPeople = count => {\n    const selected = [];\n    let i = 0;\n    count = Math.max(0, Math.min(count, people.length));\n\n    while (i < count) {\n      const index = Math.floor(Math.random() * people.length);\n      if (selected.includes(index)) continue;\n      ++i && selected.push(index);\n    }\n\n    return selected.map(index => {\n      const person = people[index];\n      const className = 'd-block d-flex align-items-center text-center text-white bg-secondary font-weight-bold py-2 px-4 mr-3';\n      return __jsx(\"span\", {\n        key: index,\n        className: className,\n        style: nameBadgeStyles,\n        title: person,\n        onClick: choosePersona(person)\n      }, person);\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"border-bottom border-gray w-100 px-2 d-flex align-items-center bg-white justify-content-between\",\n    style: {\n      height: 90\n    }\n  }, __jsx(\"h2\", {\n    className: \"text-dark mb-0 mx-4\"\n  }, \"Comments\"), __jsx(\"span\", {\n    class: \"badge badge-pill badge-primary mx-4\",\n    style: {\n      fontSize: '1.2rem'\n    }\n  }, this.state.comments.length)), __jsx(\"div\", {\n    className: \"border-top border-gray w-100 px-4 d-flex flex-wrap align-items-center align-content-center bg-light\",\n    style: {\n      height: 160\n    }\n  }, !person && __jsx(\"span\", {\n    className: \"text-dark py-2\",\n    style: {\n      fontSize: '1.5rem',\n      fontWeight: 500\n    }\n  }, \"Choose your Persona\"), __jsx(\"div\", {\n    className: \"w-100 py-2 pb-3 d-flex justify-content-start\"\n  }, person ? __jsx(\"span\", {\n    className: \"d-block d-flex align-items-center text-center text-white bg-primary font-weight-bold py-2 px-4 mr-3\",\n    style: nameBadgeStyles,\n    title: person\n  }, person) : randomPeople(4)), person && __jsx(\"textarea\", {\n    className: \"form-control px-3 py-2\",\n    onKeyUp: handleKeyUp,\n    placeholder: \"Make a comment\",\n    style: {\n      resize: 'none'\n    }\n  })));\n};\n\nexport default CommentsWidget;","map":{"version":3,"sources":["/Users/SissyXia11/Desktop/reacthomework/next-js-app/components/CommentsWidget/CommentsWidget.js"],"names":["React","Component","useState","useEffect","axios","Pusher","CommentsWidget","props","comment","setComment","person","setPerson","pusher","process","env","PUSHER_APP_KEY","cluster","PUSHER_APP_CLUSTER","encrypted","channel","subscribe","bind","comments","push","connection","post","then","response","data","disconnect","handleKeyUp","evt","value","target","keyCode","shiftKey","state","timestamp","Date","people","nameBadgeStyles","fontSize","height","borderRadius","cursor","choosePersona","randomPeople","count","selected","i","Math","max","min","length","index","floor","random","includes","map","className","fontWeight","resize"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Pusher from 'pusher-js';\n\nconst CommentsWidget = (props) => {\n  const [comment, setComment] = useState([]);\n  const [person, setPerson] = useState(null);\n\n  useEffect(() => {\n    this.pusher = new Pusher(process.env.PUSHER_APP_KEY, {\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true,\n    });\n    this.channel = this.pusher.subscribe('post-comments');\n\n    this.channel.bind('new-comment', ({ comment = null }) => {\n      const { comments } = comment && comments.push(comment);\n      setComment(comments);\n    });\n\n    this.pusher.connection.bind('connected', () => {\n      axios.post('/comments').then((response) => {\n        const comments = response.data.comments;\n        setComment(comments);\n      });\n    });\n    return () => this.pusher.disconnect();\n  }, []);\n\n  handleKeyUp = (evt) => {\n    const value = evt.target.value;\n\n    if (evt.keyCode === 13 && !evt.shiftKey) {\n      const { person } = this.state;\n      const comment = { person, comment: value, timestamp: +new Date() };\n\n      evt.target.value = '';\n      setPerson(null, () => axios.post('/comment', comment));\n    }\n  };\n\n  const people = [\n    'Stephanie',\n    'John',\n    'Steve',\n    'Anna',\n    'Margaret',\n    'Felix',\n    'Chris',\n    'Jamie',\n    'Rose',\n    'Bob',\n    'Vanessa',\n    '9lad',\n    'Bridget',\n    'Sebastian',\n    'Richard',\n  ];\n\n  const nameBadgeStyles = {\n    fontSize: '0.8rem',\n    height: 40,\n    borderRadius: 20,\n    cursor: 'pointer',\n  };\n\n  const choosePersona = (person) => (evt) => setPerson(person);\n\n  const randomPeople = (count) => {\n    const selected = [];\n    let i = 0;\n\n    count = Math.max(0, Math.min(count, people.length));\n\n    while (i < count) {\n      const index = Math.floor(Math.random() * people.length);\n      if (selected.includes(index)) continue;\n      ++i && selected.push(index);\n    }\n\n    return selected.map((index) => {\n      const person = people[index];\n      const className =\n        'd-block d-flex align-items-center text-center text-white bg-secondary font-weight-bold py-2 px-4 mr-3';\n\n      return (\n        <span\n          key={index}\n          className={className}\n          style={nameBadgeStyles}\n          title={person}\n          onClick={choosePersona(person)}\n        >\n          {person}\n        </span>\n      );\n    });\n  };\n  return (\n    <>\n      <div\n        className='border-bottom border-gray w-100 px-2 d-flex align-items-center bg-white justify-content-between'\n        style={{ height: 90 }}\n      >\n        <h2 className='text-dark mb-0 mx-4'>Comments</h2>\n        <span\n          class='badge badge-pill badge-primary mx-4'\n          style={{ fontSize: '1.2rem' }}\n        >\n          {this.state.comments.length}\n        </span>\n      </div>\n\n      <div\n        className='border-top border-gray w-100 px-4 d-flex flex-wrap align-items-center align-content-center bg-light'\n        style={{ height: 160 }}\n      >\n        {!person && (\n          <span\n            className='text-dark py-2'\n            style={{ fontSize: '1.5rem', fontWeight: 500 }}\n          >\n            Choose your Persona\n          </span>\n        )}\n\n        <div className='w-100 py-2 pb-3 d-flex justify-content-start'>\n          {person ? (\n            <span\n              className='d-block d-flex align-items-center text-center text-white bg-primary font-weight-bold py-2 px-4 mr-3'\n              style={nameBadgeStyles}\n              title={person}\n            >\n              {person}\n            </span>\n          ) : (\n            randomPeople(4)\n          )}\n        </div>\n\n        {person && (\n          <textarea\n            className='form-control px-3 py-2'\n            onKeyUp={handleKeyUp}\n            placeholder='Make a comment'\n            style={{ resize: 'none' }}\n          ></textarea>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default CommentsWidget;\n"]},"metadata":{},"sourceType":"module"}